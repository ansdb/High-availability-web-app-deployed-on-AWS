Description: This servers template contains the resources needed to make the web app
             high available and scalable.

Parameters:
  AllowAllEgressIngressCidr:
    Description: The web app load balancer egress and ingress Cird.
    Type: String
  LoadBalancerEgressIngressPort:
    Description: The web app load balancer egress and ingress Port.
    Type: String
  WebServersProtocol:
    Description: The web app servers Protocol.
    Type: String
  MinimumServers:
    Description: The web app Minimum Servers for auto scaling.
    Type: String
  MaximumServers:
    Description: The web app Maximum Servers for auto scaling.
    Type: String

Resources:
  WebAppLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic to acheive the web app
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: !Ref LoadBalancerEgressIngressPort
        ToPort: !Ref LoadBalancerEgressIngressPort
        CidrIp: !Ref AllowAllEgressIngressCidr
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref LoadBalancerEgressIngressPort
        ToPort: !Ref LoadBalancerEgressIngressPort
        CidrIp: !Ref AllowAllEgressIngressCidr
      Tags:
        - Key: Load balancer security group
          Value: Web App load balancer security group
      VpcId: 
        Fn::ImportValue: VPCWebApp-ID

  WebAppServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to our hosts and SSH from local only
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref AllowAllEgressIngressCidr
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref LoadBalancerEgressIngressPort
        ToPort: !Ref LoadBalancerEgressIngressPort
        CidrIp: !Ref AllowAllEgressIngressCidr
      Tags:
        - Key: servers security group
          Value: Web App servers security group
      VpcId: 
        Fn::ImportValue: VPCWebApp-ID

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebAppLoadBalancer
      Subnets:
        - Fn::ImportValue: PublicSubnet1WebApp
        - Fn::ImportValue: PublicSubnet2WebApp
      SecurityGroups:
        - !Ref WebAppLoadBalancerSecurityGroup
      Tags:
        - Key: load balancer
          Value: Web App load balancer

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: !Ref WebServersProtocol
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Name: WebAppTargetGroup
      Port: !Ref LoadBalancerEgressIngressPort
      Protocol: !Ref WebServersProtocol
      Tags: 
        - Key: Target Group
          Value: Web App Target Group
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: VPCWebApp-ID

  WebAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: !Ref LoadBalancerEgressIngressPort
      Protocol: !Ref WebServersProtocol

  WebAppLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions: 
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref WebAppLoadBalancerListener
      Priority: 1

  WebAppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      BlockDeviceMappings: 
        - DeviceName: "/dev/sdk"
          Ebs: 
            VolumeSize: 10
      ImageId: ami-003634241a8fcdec0
      InstanceType: t3.medium
      SecurityGroups: 
        - !Ref WebAppServersSecurityGroup
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebAppAutoScalingGroup
      VPCZoneIdentifier:
        - Fn::ImportValue: PrivateSubnets
      LaunchConfigurationName: !Ref WebAppLaunchConfiguration
      MinSize: !Ref MinimumServers
      MaxSize: !Ref MaximumServers
      TargetGroupARNs:
        - !Ref WebAppTargetGroup

  WebAppBastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow just my Ip Address to connect to bastion host for troubleshooting purposes
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        # Put your own IP address that will be allowed to connect to the bastion host
        CidrIp: 0.0.0.0/32
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref AllowAllEgressIngressCidr
      Tags:
        - Key: Bastion host security group
          Value: Web App bastion host security group
      VpcId: 
        Fn::ImportValue: VPCWebApp-ID
#This bastion host will be used to ssh into the web app hosts located in the two private subnets to troubleshoot

  WebAppBastionHostEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-west-2a
      BlockDeviceMappings: 
        - DeviceName: "/dev/sdk"
          Ebs: 
            VolumeSize: 10
      ImageId: ami-003634241a8fcdec0
      InstanceType: t2.micro
# The private key/public key file name that will allow you to ssh into your bastion host remotely
# you need to previously created it on you AWS account before running this template so it will ready to use
      SubnetId:
        Fn::ImportValue: PublicSubnet1WebApp
      SecurityGroupIds:
        - !GetAtt "WebAppBastionHostSecurityGroup.GroupId"